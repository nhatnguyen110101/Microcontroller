
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003050  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e4  080031e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080031e4  080031e4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031e4  080031e4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080031ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000074  08003260  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08003260  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bab4  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea6  00000000  00000000  0002bb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cd8  00000000  00000000  0002f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb82  00000000  00000000  00045f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865f7  00000000  00000000  00052ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d90d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d8  00000000  00000000  000d9124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003144 	.word	0x08003144

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003144 	.word	0x08003144

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GetNewNode>:
};

struct Node* head, * tail; // Khởi tạo Node head global của dslk đôi.


struct Node* GetNewNode(int time, int index) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 8000166:	2010      	movs	r0, #16
 8000168:	f002 fece 	bl	8002f08 <malloc>
 800016c:	4603      	mov	r3, r0
 800016e:	60fb      	str	r3, [r7, #12]
    newNode->time_data = time;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	601a      	str	r2, [r3, #0]
    newNode->index_data = index;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	683a      	ldr	r2, [r7, #0]
 800017a:	605a      	str	r2, [r3, #4]
    newNode->prev = NULL;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	60da      	str	r2, [r3, #12]
    newNode->next = NULL;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2200      	movs	r2, #0
 8000186:	609a      	str	r2, [r3, #8]
    return newNode;
 8000188:	68fb      	ldr	r3, [r7, #12]
}
 800018a:	4618      	mov	r0, r3
 800018c:	3710      	adds	r7, #16
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}

08000192 <Swap_Node>:

void Swap_Node(struct Node* root) {
 8000192:	b480      	push	{r7}
 8000194:	b085      	sub	sp, #20
 8000196:	af00      	add	r7, sp, #0
 8000198:	6078      	str	r0, [r7, #4]
    int tmp_time_data = root->next->time_data;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	689b      	ldr	r3, [r3, #8]
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	60fb      	str	r3, [r7, #12]
    int tmp_index_data = root->next->index_data;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	689b      	ldr	r3, [r3, #8]
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	60bb      	str	r3, [r7, #8]
    root->next->time_data = root->time_data;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	689b      	ldr	r3, [r3, #8]
 80001ae:	687a      	ldr	r2, [r7, #4]
 80001b0:	6812      	ldr	r2, [r2, #0]
 80001b2:	601a      	str	r2, [r3, #0]
    root->time_data = tmp_time_data;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	68fa      	ldr	r2, [r7, #12]
 80001b8:	601a      	str	r2, [r3, #0]
    root->next->index_data = root->index_data;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	689b      	ldr	r3, [r3, #8]
 80001be:	687a      	ldr	r2, [r7, #4]
 80001c0:	6852      	ldr	r2, [r2, #4]
 80001c2:	605a      	str	r2, [r3, #4]
    root->index_data = tmp_index_data;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	68ba      	ldr	r2, [r7, #8]
 80001c8:	605a      	str	r2, [r3, #4]
}
 80001ca:	bf00      	nop
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <Sorting>:
int Sorting() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    struct Node* tmpNode = tail;
 80001da:	4b11      	ldr	r3, [pc, #68]	; (8000220 <Sorting+0x4c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	607b      	str	r3, [r7, #4]
    int flag_sort = 1;
 80001e0:	2301      	movs	r3, #1
 80001e2:	603b      	str	r3, [r7, #0]
    while (flag_sort && tmpNode->next != NULL) {
 80001e4:	e00f      	b.n	8000206 <Sorting+0x32>
        if (tmpNode->time_data < tmpNode->next->time_data) {
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681a      	ldr	r2, [r3, #0]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	da06      	bge.n	8000202 <Sorting+0x2e>
            Swap_Node(tmpNode);
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f7ff ffcc 	bl	8000192 <Swap_Node>
            tmpNode = tmpNode->next;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	e001      	b.n	8000206 <Sorting+0x32>
        }
        else flag_sort = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	603b      	str	r3, [r7, #0]
    while (flag_sort && tmpNode->next != NULL) {
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d003      	beq.n	8000214 <Sorting+0x40>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1e8      	bne.n	80001e6 <Sorting+0x12>
    }
    return 1;
 8000214:	2301      	movs	r3, #1
}
 8000216:	4618      	mov	r0, r3
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	200003d8 	.word	0x200003d8

08000224 <InsertAtTail>:

void InsertAtTail(int time, int data) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
    struct Node* newNode = GetNewNode(time, data);
 800022e:	6839      	ldr	r1, [r7, #0]
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ff93 	bl	800015c <GetNewNode>
 8000236:	60f8      	str	r0, [r7, #12]
    if (head == NULL) {
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <InsertAtTail+0x4c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d106      	bne.n	800024e <InsertAtTail+0x2a>
        head = newNode;
 8000240:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <InsertAtTail+0x4c>)
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	6013      	str	r3, [r2, #0]
        tail = newNode;
 8000246:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <InsertAtTail+0x50>)
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	6013      	str	r3, [r2, #0]
        return;
 800024c:	e00c      	b.n	8000268 <InsertAtTail+0x44>
    }
    tail->prev = newNode;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <InsertAtTail+0x50>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	60da      	str	r2, [r3, #12]
    newNode->next = tail;
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <InsertAtTail+0x50>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	609a      	str	r2, [r3, #8]
    tail = newNode;
 800025e:	4a05      	ldr	r2, [pc, #20]	; (8000274 <InsertAtTail+0x50>)
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	6013      	str	r3, [r2, #0]

    Sorting();
 8000264:	f7ff ffb6 	bl	80001d4 <Sorting>
}
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	200003dc 	.word	0x200003dc
 8000274:	200003d8 	.word	0x200003d8

08000278 <DeleteAtHead>:


void DeleteAtHead() {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
    if (head == NULL) {
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <DeleteAtHead+0x38>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d00f      	beq.n	80002a6 <DeleteAtHead+0x2e>
        return;
    }
    struct Node* tmp = head;
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <DeleteAtHead+0x38>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	607b      	str	r3, [r7, #4]
    head = head->prev;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <DeleteAtHead+0x38>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <DeleteAtHead+0x38>)
 8000294:	6013      	str	r3, [r2, #0]
    head->next = NULL;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <DeleteAtHead+0x38>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
    free(tmp);
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f002 fe3a 	bl	8002f18 <free>
 80002a4:	e000      	b.n	80002a8 <DeleteAtHead+0x30>
        return;
 80002a6:	bf00      	nop
}
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200003dc 	.word	0x200003dc

080002b4 <SCH_Delete_Task>:
	}
	Error_code_G = NORMAL;
}


unsigned char SCH_Delete_Task( const tByte TASK_INDEX) {
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	 unsigned char Return_code;
	 	 if ( SCH_tasks_G[TASK_INDEX ].TaskID == 0) {
 80002be:	79fa      	ldrb	r2, [r7, #7]
 80002c0:	491f      	ldr	r1, [pc, #124]	; (8000340 <SCH_Delete_Task+0x8c>)
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	440b      	add	r3, r1
 80002cc:	3310      	adds	r3, #16
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d105      	bne.n	80002e0 <SCH_Delete_Task+0x2c>
	 		// Nếu như không có task trong location này
	 		// Thì set lỗi cho biến toàn cục hiển thị lỗi.
	 		 Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <SCH_Delete_Task+0x90>)
 80002d6:	2208      	movs	r2, #8
 80002d8:	701a      	strb	r2, [r3, #0]
	 		// Trả về lỗi.
	 		Return_code = 1;
 80002da:	2301      	movs	r3, #1
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	e001      	b.n	80002e4 <SCH_Delete_Task+0x30>
	 	 } else {
	 		 // Không có lỗi trả về bình thường.
	 		 Return_code = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	73fb      	strb	r3, [r7, #15]
	 	 }
	 SCH_tasks_G[TASK_INDEX ].pTask = 0x0000 ;
 80002e4:	79fa      	ldrb	r2, [r7, #7]
 80002e6:	4916      	ldr	r1, [pc, #88]	; (8000340 <SCH_Delete_Task+0x8c>)
 80002e8:	4613      	mov	r3, r2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	4413      	add	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	440b      	add	r3, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX ].Delay = 0;
 80002f6:	79fa      	ldrb	r2, [r7, #7]
 80002f8:	4911      	ldr	r1, [pc, #68]	; (8000340 <SCH_Delete_Task+0x8c>)
 80002fa:	4613      	mov	r3, r2
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4413      	add	r3, r2
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	440b      	add	r3, r1
 8000304:	3304      	adds	r3, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX ].Period = 0;
 800030a:	79fa      	ldrb	r2, [r7, #7]
 800030c:	490c      	ldr	r1, [pc, #48]	; (8000340 <SCH_Delete_Task+0x8c>)
 800030e:	4613      	mov	r3, r2
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	4413      	add	r3, r2
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	440b      	add	r3, r1
 8000318:	3308      	adds	r3, #8
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX ].RunMe = 0;
 800031e:	79fa      	ldrb	r2, [r7, #7]
 8000320:	4907      	ldr	r1, [pc, #28]	; (8000340 <SCH_Delete_Task+0x8c>)
 8000322:	4613      	mov	r3, r2
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	440b      	add	r3, r1
 800032c:	330c      	adds	r3, #12
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]

	 return Return_code ; // return status
 8000332:	7bfb      	ldrb	r3, [r7, #15]
}
 8000334:	4618      	mov	r0, r3
 8000336:	3714      	adds	r7, #20
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	200000b8 	.word	0x200000b8
 8000344:	20000090 	.word	0x20000090

08000348 <SCH_Add_Task>:

unsigned char SCH_Add_Task( void ( * pFunction) () , unsigned int DELAY, unsigned int PERIOD){
 8000348:	b480      	push	{r7}
 800034a:	b087      	sub	sp, #28
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	75fb      	strb	r3, [r7, #23]
	// Đầu tiên tìm một vùng trống trong mảng ( nếu còn)
	while ((SCH_tasks_G[Index].pTask != 0) && ( Index < SCH_MAX_TASKS)){
 8000358:	e002      	b.n	8000360 <SCH_Add_Task+0x18>
		Index++;
 800035a:	7dfb      	ldrb	r3, [r7, #23]
 800035c:	3301      	adds	r3, #1
 800035e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && ( Index < SCH_MAX_TASKS)){
 8000360:	7dfa      	ldrb	r2, [r7, #23]
 8000362:	493c      	ldr	r1, [pc, #240]	; (8000454 <SCH_Add_Task+0x10c>)
 8000364:	4613      	mov	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	440b      	add	r3, r1
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d002      	beq.n	800037a <SCH_Add_Task+0x32>
 8000374:	7dfb      	ldrb	r3, [r7, #23]
 8000376:	2b27      	cmp	r3, #39	; 0x27
 8000378:	d9ef      	bls.n	800035a <SCH_Add_Task+0x12>
	}
	// Khi duyệt toàn bộ mảng nhưng không có vùng trống.
	if ( Index == SCH_MAX_TASKS){
 800037a:	7dfb      	ldrb	r3, [r7, #23]
 800037c:	2b28      	cmp	r3, #40	; 0x28
 800037e:	d104      	bne.n	800038a <SCH_Add_Task+0x42>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000380:	4b35      	ldr	r3, [pc, #212]	; (8000458 <SCH_Add_Task+0x110>)
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASKS;
 8000386:	2328      	movs	r3, #40	; 0x28
 8000388:	e05e      	b.n	8000448 <SCH_Add_Task+0x100>
	}
	// Nếu chương trình chạy tới đây, thì có một vùng trống trong mảng.
	SCH_tasks_G[ Index ].pTask = pFunction ;
 800038a:	7dfa      	ldrb	r2, [r7, #23]
 800038c:	4931      	ldr	r1, [pc, #196]	; (8000454 <SCH_Add_Task+0x10c>)
 800038e:	4613      	mov	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4413      	add	r3, r2
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	440b      	add	r3, r1
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ Index ].Delay = DELAY;
 800039c:	7dfa      	ldrb	r2, [r7, #23]
 800039e:	492d      	ldr	r1, [pc, #180]	; (8000454 <SCH_Add_Task+0x10c>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	3304      	adds	r3, #4
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ Index ].Period = PERIOD;
 80003b0:	7dfa      	ldrb	r2, [r7, #23]
 80003b2:	4928      	ldr	r1, [pc, #160]	; (8000454 <SCH_Add_Task+0x10c>)
 80003b4:	4613      	mov	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4413      	add	r3, r2
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	440b      	add	r3, r1
 80003be:	3308      	adds	r3, #8
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	601a      	str	r2, [r3, #0]

	if (SCH_tasks_G[ Index ].Delay == 0){
 80003c4:	7dfa      	ldrb	r2, [r7, #23]
 80003c6:	4923      	ldr	r1, [pc, #140]	; (8000454 <SCH_Add_Task+0x10c>)
 80003c8:	4613      	mov	r3, r2
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	440b      	add	r3, r1
 80003d2:	3304      	adds	r3, #4
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d10a      	bne.n	80003f0 <SCH_Add_Task+0xa8>
		SCH_tasks_G[ Index ].RunMe = 1;
 80003da:	7dfa      	ldrb	r2, [r7, #23]
 80003dc:	491d      	ldr	r1, [pc, #116]	; (8000454 <SCH_Add_Task+0x10c>)
 80003de:	4613      	mov	r3, r2
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	440b      	add	r3, r1
 80003e8:	330c      	adds	r3, #12
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	e009      	b.n	8000404 <SCH_Add_Task+0xbc>
	} else SCH_tasks_G[ Index ].RunMe = 0;
 80003f0:	7dfa      	ldrb	r2, [r7, #23]
 80003f2:	4918      	ldr	r1, [pc, #96]	; (8000454 <SCH_Add_Task+0x10c>)
 80003f4:	4613      	mov	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	440b      	add	r3, r1
 80003fe:	330c      	adds	r3, #12
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]

	// Tìm task có delay nhỏ nhất
	 if (min_delay > SCH_tasks_G[Index ].Delay ){
 8000404:	7dfa      	ldrb	r2, [r7, #23]
 8000406:	4913      	ldr	r1, [pc, #76]	; (8000454 <SCH_Add_Task+0x10c>)
 8000408:	4613      	mov	r3, r2
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	4413      	add	r3, r2
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	440b      	add	r3, r1
 8000412:	3304      	adds	r3, #4
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <SCH_Add_Task+0x114>)
 8000418:	6812      	ldr	r2, [r2, #0]
 800041a:	4293      	cmp	r3, r2
 800041c:	d20e      	bcs.n	800043c <SCH_Add_Task+0xf4>
		 min_delay = SCH_tasks_G[Index ].Delay;
 800041e:	7dfa      	ldrb	r2, [r7, #23]
 8000420:	490c      	ldr	r1, [pc, #48]	; (8000454 <SCH_Add_Task+0x10c>)
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	440b      	add	r3, r1
 800042c:	3304      	adds	r3, #4
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <SCH_Add_Task+0x114>)
 8000434:	601a      	str	r2, [r3, #0]
		 task_min_delay = Index;
 8000436:	7dfb      	ldrb	r3, [r7, #23]
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <SCH_Add_Task+0x118>)
 800043a:	6013      	str	r3, [r2, #0]
	 }

	num_task++;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <SCH_Add_Task+0x11c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	4a08      	ldr	r2, [pc, #32]	; (8000464 <SCH_Add_Task+0x11c>)
 8000444:	6013      	str	r3, [r2, #0]
	return Index;
 8000446:	7dfb      	ldrb	r3, [r7, #23]
}
 8000448:	4618      	mov	r0, r3
 800044a:	371c      	adds	r7, #28
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	200000b8 	.word	0x200000b8
 8000458:	20000090 	.word	0x20000090
 800045c:	20000000 	.word	0x20000000
 8000460:	20000094 	.word	0x20000094
 8000464:	20000098 	.word	0x20000098

08000468 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks( void ) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0

	if (flag_list == 0){
 800046e:	4b40      	ldr	r3, [pc, #256]	; (8000570 <SCH_Dispatch_Tasks+0x108>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d121      	bne.n	80004ba <SCH_Dispatch_Tasks+0x52>
		for (int i = 0; i < num_task ; i++ ){
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	e014      	b.n	80004a6 <SCH_Dispatch_Tasks+0x3e>
			if (i != task_min_delay ){
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <SCH_Dispatch_Tasks+0x10c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	d00c      	beq.n	80004a0 <SCH_Dispatch_Tasks+0x38>
				InsertAtTail(SCH_tasks_G [ i ].Delay, i);
 8000486:	493c      	ldr	r1, [pc, #240]	; (8000578 <SCH_Dispatch_Tasks+0x110>)
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	4613      	mov	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4413      	add	r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	440b      	add	r3, r1
 8000494:	3304      	adds	r3, #4
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff fec2 	bl	8000224 <InsertAtTail>
		for (int i = 0; i < num_task ; i++ ){
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3301      	adds	r3, #1
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	4b35      	ldr	r3, [pc, #212]	; (800057c <SCH_Dispatch_Tasks+0x114>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dbe5      	blt.n	800047c <SCH_Dispatch_Tasks+0x14>
			}
		}
		flag_list++;
 80004b0:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <SCH_Dispatch_Tasks+0x108>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a2e      	ldr	r2, [pc, #184]	; (8000570 <SCH_Dispatch_Tasks+0x108>)
 80004b8:	6013      	str	r3, [r2, #0]
	}
	unsigned char Index;
// Giải ngố 1 task khi nó tới lúc chạy.
	for ( Index = 0; Index < num_task; Index++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	70fb      	strb	r3, [r7, #3]
 80004be:	e04d      	b.n	800055c <SCH_Dispatch_Tasks+0xf4>
		if ( SCH_tasks_G[Index].RunMe > 0) {
 80004c0:	78fa      	ldrb	r2, [r7, #3]
 80004c2:	492d      	ldr	r1, [pc, #180]	; (8000578 <SCH_Dispatch_Tasks+0x110>)
 80004c4:	4613      	mov	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4413      	add	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	440b      	add	r3, r1
 80004ce:	330c      	adds	r3, #12
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d03f      	beq.n	8000556 <SCH_Dispatch_Tasks+0xee>
			(*SCH_tasks_G[Index].pTask) () ; // Chạy task tới lượt
 80004d6:	78fa      	ldrb	r2, [r7, #3]
 80004d8:	4927      	ldr	r1, [pc, #156]	; (8000578 <SCH_Dispatch_Tasks+0x110>)
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	440b      	add	r3, r1
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe = SCH_tasks_G[Index].RunMe - 1;
 80004e8:	78fa      	ldrb	r2, [r7, #3]
 80004ea:	4923      	ldr	r1, [pc, #140]	; (8000578 <SCH_Dispatch_Tasks+0x110>)
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	440b      	add	r3, r1
 80004f6:	330c      	adds	r3, #12
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	78fa      	ldrb	r2, [r7, #3]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	b2d8      	uxtb	r0, r3
 8000500:	491d      	ldr	r1, [pc, #116]	; (8000578 <SCH_Dispatch_Tasks+0x110>)
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	440b      	add	r3, r1
 800050c:	330c      	adds	r3, #12
 800050e:	4602      	mov	r2, r0
 8000510:	701a      	strb	r2, [r3, #0]
		// Tải lại / giảm cờ kiểm tra task chạy
		// Nếu flag ktra task chạy vẫn còn thì sẽ tự động chạy tiếp
			if ( SCH_tasks_G[Index].Period == 0){
 8000512:	78fa      	ldrb	r2, [r7, #3]
 8000514:	4918      	ldr	r1, [pc, #96]	; (8000578 <SCH_Dispatch_Tasks+0x110>)
 8000516:	4613      	mov	r3, r2
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4413      	add	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	440b      	add	r3, r1
 8000520:	3308      	adds	r3, #8
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <SCH_Dispatch_Tasks+0xca>
			 		SCH_Delete_Task(Index);
 8000528:	78fb      	ldrb	r3, [r7, #3]
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fec2 	bl	80002b4 <SCH_Delete_Task>
 8000530:	e011      	b.n	8000556 <SCH_Dispatch_Tasks+0xee>
			} else SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000532:	78f9      	ldrb	r1, [r7, #3]
 8000534:	78fa      	ldrb	r2, [r7, #3]
 8000536:	4810      	ldr	r0, [pc, #64]	; (8000578 <SCH_Dispatch_Tasks+0x110>)
 8000538:	460b      	mov	r3, r1
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4403      	add	r3, r0
 8000542:	3308      	adds	r3, #8
 8000544:	6819      	ldr	r1, [r3, #0]
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <SCH_Dispatch_Tasks+0x110>)
 8000548:	4613      	mov	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4403      	add	r3, r0
 8000552:	3304      	adds	r3, #4
 8000554:	6019      	str	r1, [r3, #0]
	for ( Index = 0; Index < num_task; Index++) {
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	3301      	adds	r3, #1
 800055a:	70fb      	strb	r3, [r7, #3]
 800055c:	78fa      	ldrb	r2, [r7, #3]
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <SCH_Dispatch_Tasks+0x114>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	dbac      	blt.n	80004c0 <SCH_Dispatch_Tasks+0x58>
		}
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000009c 	.word	0x2000009c
 8000574:	20000094 	.word	0x20000094
 8000578:	200000b8 	.word	0x200000b8
 800057c:	20000098 	.word	0x20000098

08000580 <SCH_Update>:





void SCH_Update( void ) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	if ( SCH_tasks_G [ task_min_delay ] . pTask ) {
 8000586:	4b43      	ldr	r3, [pc, #268]	; (8000694 <SCH_Update+0x114>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4943      	ldr	r1, [pc, #268]	; (8000698 <SCH_Update+0x118>)
 800058c:	4613      	mov	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d033      	beq.n	8000604 <SCH_Update+0x84>
		 SCH_tasks_G [ task_min_delay ].Delay -- ;
 800059c:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <SCH_Update+0x114>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	493d      	ldr	r1, [pc, #244]	; (8000698 <SCH_Update+0x118>)
 80005a2:	4613      	mov	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	3304      	adds	r3, #4
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	1e59      	subs	r1, r3, #1
 80005b2:	4839      	ldr	r0, [pc, #228]	; (8000698 <SCH_Update+0x118>)
 80005b4:	4613      	mov	r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4413      	add	r3, r2
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	4403      	add	r3, r0
 80005be:	3304      	adds	r3, #4
 80005c0:	6019      	str	r1, [r3, #0]
		 if (SCH_tasks_G [task_min_delay ] . Delay == 0){
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <SCH_Update+0x114>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4934      	ldr	r1, [pc, #208]	; (8000698 <SCH_Update+0x118>)
 80005c8:	4613      	mov	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4413      	add	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	3304      	adds	r3, #4
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d114      	bne.n	8000604 <SCH_Update+0x84>
			 SCH_tasks_G [ task_min_delay ] . RunMe++;
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <SCH_Update+0x114>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	492e      	ldr	r1, [pc, #184]	; (8000698 <SCH_Update+0x118>)
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	330c      	adds	r3, #12
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b2d8      	uxtb	r0, r3
 80005f2:	4929      	ldr	r1, [pc, #164]	; (8000698 <SCH_Update+0x118>)
 80005f4:	4613      	mov	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4413      	add	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	330c      	adds	r3, #12
 8000600:	4602      	mov	r2, r0
 8000602:	701a      	strb	r2, [r3, #0]
		 }
	}
	if (get_time + 1 == head->time_data){
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <SCH_Update+0x11c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SCH_Update+0x120>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d13b      	bne.n	800068c <SCH_Update+0x10c>
		SCH_tasks_G [ head->index_data ].RunMe++;
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SCH_Update+0x120>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	685a      	ldr	r2, [r3, #4]
 800061a:	491f      	ldr	r1, [pc, #124]	; (8000698 <SCH_Update+0x118>)
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	330c      	adds	r3, #12
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	b2d8      	uxtb	r0, r3
 800062e:	491a      	ldr	r1, [pc, #104]	; (8000698 <SCH_Update+0x118>)
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	440b      	add	r3, r1
 800063a:	330c      	adds	r3, #12
 800063c:	4602      	mov	r2, r0
 800063e:	701a      	strb	r2, [r3, #0]
		if (SCH_tasks_G [ head->index_data ].Period != 0){
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <SCH_Update+0x120>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	4914      	ldr	r1, [pc, #80]	; (8000698 <SCH_Update+0x118>)
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	3308      	adds	r3, #8
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d016      	beq.n	8000688 <SCH_Update+0x108>
			int new_val  = get_time + 1 + SCH_tasks_G [ head->index_data ].Period;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <SCH_Update+0x120>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	490d      	ldr	r1, [pc, #52]	; (8000698 <SCH_Update+0x118>)
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	3308      	adds	r3, #8
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0a      	ldr	r2, [pc, #40]	; (800069c <SCH_Update+0x11c>)
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	4413      	add	r3, r2
 8000676:	3301      	adds	r3, #1
 8000678:	607b      	str	r3, [r7, #4]
			InsertAtTail(new_val,  head->index_data);
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <SCH_Update+0x120>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff fdce 	bl	8000224 <InsertAtTail>
		}
		DeleteAtHead();
 8000688:	f7ff fdf6 	bl	8000278 <DeleteAtHead>
	}
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000094 	.word	0x20000094
 8000698:	200000b8 	.word	0x200000b8
 800069c:	200000a0 	.word	0x200000a0
 80006a0:	200003dc 	.word	0x200003dc

080006a4 <task1>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);

};
int get_time = 0;
void task1(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80006a8:	2102      	movs	r1, #2
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <task1+0x18>)
 80006ac:	f000 fef8 	bl	80014a0 <HAL_GPIO_TogglePin>
	debugPrintln(&huart1, "1      ");
 80006b0:	4903      	ldr	r1, [pc, #12]	; (80006c0 <task1+0x1c>)
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <task1+0x20>)
 80006b4:	f000 f8b6 	bl	8000824 <debugPrintln>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40010800 	.word	0x40010800
 80006c0:	0800315c 	.word	0x0800315c
 80006c4:	200003e0 	.word	0x200003e0

080006c8 <task2>:

void task2(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80006cc:	2104      	movs	r1, #4
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <task2+0x18>)
 80006d0:	f000 fee6 	bl	80014a0 <HAL_GPIO_TogglePin>
	debugPrintln(&huart1, "2      ");
 80006d4:	4903      	ldr	r1, [pc, #12]	; (80006e4 <task2+0x1c>)
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <task2+0x20>)
 80006d8:	f000 f8a4 	bl	8000824 <debugPrintln>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40010800 	.word	0x40010800
 80006e4:	08003164 	.word	0x08003164
 80006e8:	200003e0 	.word	0x200003e0

080006ec <task3>:
void task3(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80006f0:	2108      	movs	r1, #8
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <task3+0x18>)
 80006f4:	f000 fed4 	bl	80014a0 <HAL_GPIO_TogglePin>
	debugPrintln(&huart1, "3      ");
 80006f8:	4903      	ldr	r1, [pc, #12]	; (8000708 <task3+0x1c>)
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <task3+0x20>)
 80006fc:	f000 f892 	bl	8000824 <debugPrintln>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40010800 	.word	0x40010800
 8000708:	0800316c 	.word	0x0800316c
 800070c:	200003e0 	.word	0x200003e0

08000710 <task4>:
void task4(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000714:	2110      	movs	r1, #16
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <task4+0x18>)
 8000718:	f000 fec2 	bl	80014a0 <HAL_GPIO_TogglePin>
	debugPrintln(&huart1, "4      ");
 800071c:	4903      	ldr	r1, [pc, #12]	; (800072c <task4+0x1c>)
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <task4+0x20>)
 8000720:	f000 f880 	bl	8000824 <debugPrintln>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40010800 	.word	0x40010800
 800072c:	08003174 	.word	0x08003174
 8000730:	200003e0 	.word	0x200003e0

08000734 <task5>:
void task5(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000738:	2120      	movs	r1, #32
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <task5+0x18>)
 800073c:	f000 feb0 	bl	80014a0 <HAL_GPIO_TogglePin>
	debugPrintln(&huart1, "5      ");
 8000740:	4903      	ldr	r1, [pc, #12]	; (8000750 <task5+0x1c>)
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <task5+0x20>)
 8000744:	f000 f86e 	bl	8000824 <debugPrintln>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40010800 	.word	0x40010800
 8000750:	0800317c 	.word	0x0800317c
 8000754:	200003e0 	.word	0x200003e0

08000758 <timer_run>:
	timer0_counter = duration ;
	timer0_flag = 0;
}


void timer_run(){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0 ) {
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <timer_run+0x2c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	dd04      	ble.n	800076e <timer_run+0x16>
		timer0_counter--;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <timer_run+0x2c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	4a06      	ldr	r2, [pc, #24]	; (8000784 <timer_run+0x2c>)
 800076c:	6013      	str	r3, [r2, #0]
	}
	if (timer0_counter == 0 ) {
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <timer_run+0x2c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d102      	bne.n	800077c <timer_run+0x24>
		timer0_flag = 1;
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <timer_run+0x30>)
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
	}

}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	200000a4 	.word	0x200000a4
 8000788:	200000a8 	.word	0x200000a8

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 fad3 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f887 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800079a:	f000 f8c1 	bl	8000920 <MX_TIM2_Init>
  MX_GPIO_Init();
 800079e:	f000 f935 	bl	8000a0c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a2:	f000 f909 	bl	80009b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80007a6:	4817      	ldr	r0, [pc, #92]	; (8000804 <main+0x78>)
 80007a8:	f001 fafe 	bl	8001da8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  SCH_Add_Task(task1, 0, 50);
 80007ac:	2232      	movs	r2, #50	; 0x32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4815      	ldr	r0, [pc, #84]	; (8000808 <main+0x7c>)
 80007b2:	f7ff fdc9 	bl	8000348 <SCH_Add_Task>
  SCH_Add_Task(task2, 1, 100);
 80007b6:	2264      	movs	r2, #100	; 0x64
 80007b8:	2101      	movs	r1, #1
 80007ba:	4814      	ldr	r0, [pc, #80]	; (800080c <main+0x80>)
 80007bc:	f7ff fdc4 	bl	8000348 <SCH_Add_Task>
  SCH_Add_Task(task3, 2, 150);
 80007c0:	2296      	movs	r2, #150	; 0x96
 80007c2:	2102      	movs	r1, #2
 80007c4:	4812      	ldr	r0, [pc, #72]	; (8000810 <main+0x84>)
 80007c6:	f7ff fdbf 	bl	8000348 <SCH_Add_Task>
  SCH_Add_Task(task4, 3, 200);
 80007ca:	22c8      	movs	r2, #200	; 0xc8
 80007cc:	2103      	movs	r1, #3
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <main+0x88>)
 80007d0:	f7ff fdba 	bl	8000348 <SCH_Add_Task>
  SCH_Add_Task(task5, 4, 250);
 80007d4:	22fa      	movs	r2, #250	; 0xfa
 80007d6:	2104      	movs	r1, #4
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <main+0x8c>)
 80007da:	f7ff fdb5 	bl	8000348 <SCH_Add_Task>

  HAL_UART_Transmit(&huart1, "Task      Time", 20, 10);
 80007de:	230a      	movs	r3, #10
 80007e0:	2214      	movs	r2, #20
 80007e2:	490e      	ldr	r1, [pc, #56]	; (800081c <main+0x90>)
 80007e4:	480e      	ldr	r0, [pc, #56]	; (8000820 <main+0x94>)
 80007e6:	f001 fec0 	bl	800256a <HAL_UART_Transmit>
  char newline[2] = "\r\n";
 80007ea:	f640 230d 	movw	r3, #2573	; 0xa0d
 80007ee:	80bb      	strh	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 10);
 80007f0:	1d39      	adds	r1, r7, #4
 80007f2:	230a      	movs	r3, #10
 80007f4:	2202      	movs	r2, #2
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <main+0x94>)
 80007f8:	f001 feb7 	bl	800256a <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80007fc:	f7ff fe34 	bl	8000468 <SCH_Dispatch_Tasks>
  {
 8000800:	e7fc      	b.n	80007fc <main+0x70>
 8000802:	bf00      	nop
 8000804:	20000424 	.word	0x20000424
 8000808:	080006a5 	.word	0x080006a5
 800080c:	080006c9 	.word	0x080006c9
 8000810:	080006ed 	.word	0x080006ed
 8000814:	08000711 	.word	0x08000711
 8000818:	08000735 	.word	0x08000735
 800081c:	08003184 	.word	0x08003184
 8000820:	200003e0 	.word	0x200003e0

08000824 <debugPrintln>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 800082e:	6838      	ldr	r0, [r7, #0]
 8000830:	f7ff fc8c 	bl	800014c <strlen>
 8000834:	4603      	mov	r3, r0
 8000836:	b29a      	uxth	r2, r3
 8000838:	230a      	movs	r3, #10
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f001 fe94 	bl	800256a <HAL_UART_Transmit>
	 char _str[10];
	 itoa(get_time,_str,10);
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <debugPrintln+0x78>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f107 0114 	add.w	r1, r7, #20
 800084a:	220a      	movs	r2, #10
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fb59 	bl	8002f04 <itoa>
	 HAL_UART_Transmit(huart, (uint8_t *) _str, strlen(_str), 10);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fc78 	bl	800014c <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	f107 0114 	add.w	r1, r7, #20
 8000864:	230a      	movs	r3, #10
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f001 fe7f 	bl	800256a <HAL_UART_Transmit>
	 char dvi_tg[] = " ms";
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <debugPrintln+0x7c>)
 800086e:	613b      	str	r3, [r7, #16]
	 HAL_UART_Transmit(&huart1, (uint8_t *) dvi_tg, 3, 10);
 8000870:	f107 0110 	add.w	r1, r7, #16
 8000874:	230a      	movs	r3, #10
 8000876:	2203      	movs	r2, #3
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <debugPrintln+0x80>)
 800087a:	f001 fe76 	bl	800256a <HAL_UART_Transmit>
	 char newline[2] = "\r\n";
 800087e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000882:	81bb      	strh	r3, [r7, #12]
	 HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 10);
 8000884:	f107 010c 	add.w	r1, r7, #12
 8000888:	230a      	movs	r3, #10
 800088a:	2202      	movs	r2, #2
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <debugPrintln+0x80>)
 800088e:	f001 fe6c 	bl	800256a <HAL_UART_Transmit>
}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000a0 	.word	0x200000a0
 80008a0:	00736d20 	.word	0x00736d20
 80008a4:	200003e0 	.word	0x200003e0

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b090      	sub	sp, #64	; 0x40
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2228      	movs	r2, #40	; 0x28
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fb36 	bl	8002f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ce:	2301      	movs	r3, #1
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d2:	2310      	movs	r3, #16
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fdf8 	bl	80014d4 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ea:	f000 f8d9 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f864 	bl	80019d4 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000912:	f000 f8c5 	bl	8000aa0 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3740      	adds	r7, #64	; 0x40
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_TIM2_Init+0x94>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_TIM2_Init+0x94>)
 8000946:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800094a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_TIM2_Init+0x94>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_TIM2_Init+0x94>)
 8000954:	220a      	movs	r2, #10
 8000956:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_TIM2_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM2_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <MX_TIM2_Init+0x94>)
 8000966:	f001 f9cf 	bl	8001d08 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000970:	f000 f896 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_TIM2_Init+0x94>)
 8000982:	f001 fb65 	bl	8002050 <HAL_TIM_ConfigClockSource>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800098c:	f000 f888 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_TIM2_Init+0x94>)
 800099e:	f001 fd2d 	bl	80023fc <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 f87a 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000424 	.word	0x20000424

080009b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_USART1_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART1_UART_Init+0x4c>)
 80009f0:	f001 fd6e 	bl	80024d0 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f851 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200003e0 	.word	0x200003e0
 8000a08:	40013800 	.word	0x40013800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_GPIO_Init+0x5c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	213e      	movs	r1, #62	; 0x3e
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x60>)
 8000a3e:	f000 fd17 	bl	8001470 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000a42:	233e      	movs	r3, #62	; 0x3e
 8000a44:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_GPIO_Init+0x60>)
 8000a5a:	f000 fb8f 	bl	800117c <HAL_GPIO_Init>

}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010800 	.word	0x40010800

08000a70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a80:	d108      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x24>
		SCH_Update();
 8000a82:	f7ff fd7d 	bl	8000580 <SCH_Update>
		timer_run();
 8000a86:	f7ff fe67 	bl	8000758 <timer_run>
		get_time++;
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a02      	ldr	r2, [pc, #8]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a92:	6013      	str	r3, [r2, #0]
	}
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200000a0 	.word	0x200000a0

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x5c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_MspInit+0x60>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_MspInit+0x60>)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000

08000b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b20:	d113      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_TIM_Base_MspInit+0x44>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_TIM_Base_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	61d3      	str	r3, [r2, #28]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_TIM_Base_MspInit+0x44>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	201c      	movs	r0, #28
 8000b40:	f000 fa35 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b44:	201c      	movs	r0, #28
 8000b46:	f000 fa4e 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <HAL_UART_MspInit+0x9c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d139      	bne.n	8000bec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_UART_MspInit+0xa0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <HAL_UART_MspInit+0xa0>)
 8000b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_UART_MspInit+0xa0>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_UART_MspInit+0xa0>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0xa0>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_UART_MspInit+0xa0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480f      	ldr	r0, [pc, #60]	; (8000bfc <HAL_UART_MspInit+0xa4>)
 8000bbe:	f000 fadd 	bl	800117c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_UART_MspInit+0xa4>)
 8000bd8:	f000 fad0 	bl	800117c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2025      	movs	r0, #37	; 0x25
 8000be2:	f000 f9e4 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000be6:	2025      	movs	r0, #37	; 0x25
 8000be8:	f000 f9fd 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010800 	.word	0x40010800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c46:	f000 f8bf 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM2_IRQHandler+0x10>)
 8000c56:	f001 f8f3 	bl	8001e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000424 	.word	0x20000424

08000c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <USART1_IRQHandler+0x10>)
 8000c6a:	f001 fd11 	bl	8002690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200003e0 	.word	0x200003e0

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f002 f8ea 	bl	8002e80 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20002800 	.word	0x20002800
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	200000ac 	.word	0x200000ac
 8000ce0:	20000480 	.word	0x20000480

08000ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	; (8000d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d16:	f7ff ffe5 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f002 f8b7 	bl	8002e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1e:	f7ff fd35 	bl	800078c <main>
  bx lr
 8000d22:	4770      	bx	lr
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d2c:	080031ec 	.word	0x080031ec
  ldr r2, =_sbss
 8000d30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d34:	20000480 	.word	0x20000480

08000d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC1_2_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x28>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x28>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f923 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fea8 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f93b 	bl	8001002 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f903 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x1c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x20>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_IncTick+0x20>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	2000046c 	.word	0x2000046c

08000dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <HAL_GetTick+0x10>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	2000046c 	.word	0x2000046c

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4906      	ldr	r1, [pc, #24]	; (8000e98 <__NVIC_EnableIRQ+0x34>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff90 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff2d 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff42 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff90 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5f 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff35 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa2 	bl	8000f54 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800102c:	2b02      	cmp	r3, #2
 800102e:	d008      	beq.n	8001042 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2204      	movs	r2, #4
 8001034:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e020      	b.n	8001084 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 020e 	bic.w	r2, r2, #14
 8001050:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d005      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2204      	movs	r2, #4
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e051      	b.n	8001156 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 020e 	bic.w	r2, r2, #14
 80010c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a22      	ldr	r2, [pc, #136]	; (8001160 <HAL_DMA_Abort_IT+0xd0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d029      	beq.n	8001130 <HAL_DMA_Abort_IT+0xa0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <HAL_DMA_Abort_IT+0xd4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d022      	beq.n	800112c <HAL_DMA_Abort_IT+0x9c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_DMA_Abort_IT+0xd8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d01a      	beq.n	8001126 <HAL_DMA_Abort_IT+0x96>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_DMA_Abort_IT+0xdc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d012      	beq.n	8001120 <HAL_DMA_Abort_IT+0x90>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <HAL_DMA_Abort_IT+0xe0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d00a      	beq.n	800111a <HAL_DMA_Abort_IT+0x8a>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_DMA_Abort_IT+0xe4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d102      	bne.n	8001114 <HAL_DMA_Abort_IT+0x84>
 800110e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001112:	e00e      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 8001114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001118:	e00b      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 800111a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111e:	e008      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	e005      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 8001126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112a:	e002      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 800112c:	2310      	movs	r3, #16
 800112e:	e000      	b.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 8001130:	2301      	movs	r3, #1
 8001132:	4a11      	ldr	r2, [pc, #68]	; (8001178 <HAL_DMA_Abort_IT+0xe8>)
 8001134:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
    } 
  }
  return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020008 	.word	0x40020008
 8001164:	4002001c 	.word	0x4002001c
 8001168:	40020030 	.word	0x40020030
 800116c:	40020044 	.word	0x40020044
 8001170:	40020058 	.word	0x40020058
 8001174:	4002006c 	.word	0x4002006c
 8001178:	40020000 	.word	0x40020000

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b08b      	sub	sp, #44	; 0x2c
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	e148      	b.n	8001422 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001190:	2201      	movs	r2, #1
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f040 8137 	bne.w	800141c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4aa3      	ldr	r2, [pc, #652]	; (8001440 <HAL_GPIO_Init+0x2c4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d05e      	beq.n	8001276 <HAL_GPIO_Init+0xfa>
 80011b8:	4aa1      	ldr	r2, [pc, #644]	; (8001440 <HAL_GPIO_Init+0x2c4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d875      	bhi.n	80012aa <HAL_GPIO_Init+0x12e>
 80011be:	4aa1      	ldr	r2, [pc, #644]	; (8001444 <HAL_GPIO_Init+0x2c8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d058      	beq.n	8001276 <HAL_GPIO_Init+0xfa>
 80011c4:	4a9f      	ldr	r2, [pc, #636]	; (8001444 <HAL_GPIO_Init+0x2c8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d86f      	bhi.n	80012aa <HAL_GPIO_Init+0x12e>
 80011ca:	4a9f      	ldr	r2, [pc, #636]	; (8001448 <HAL_GPIO_Init+0x2cc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d052      	beq.n	8001276 <HAL_GPIO_Init+0xfa>
 80011d0:	4a9d      	ldr	r2, [pc, #628]	; (8001448 <HAL_GPIO_Init+0x2cc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d869      	bhi.n	80012aa <HAL_GPIO_Init+0x12e>
 80011d6:	4a9d      	ldr	r2, [pc, #628]	; (800144c <HAL_GPIO_Init+0x2d0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d04c      	beq.n	8001276 <HAL_GPIO_Init+0xfa>
 80011dc:	4a9b      	ldr	r2, [pc, #620]	; (800144c <HAL_GPIO_Init+0x2d0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d863      	bhi.n	80012aa <HAL_GPIO_Init+0x12e>
 80011e2:	4a9b      	ldr	r2, [pc, #620]	; (8001450 <HAL_GPIO_Init+0x2d4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d046      	beq.n	8001276 <HAL_GPIO_Init+0xfa>
 80011e8:	4a99      	ldr	r2, [pc, #612]	; (8001450 <HAL_GPIO_Init+0x2d4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d85d      	bhi.n	80012aa <HAL_GPIO_Init+0x12e>
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d82a      	bhi.n	8001248 <HAL_GPIO_Init+0xcc>
 80011f2:	2b12      	cmp	r3, #18
 80011f4:	d859      	bhi.n	80012aa <HAL_GPIO_Init+0x12e>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <HAL_GPIO_Init+0x80>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	08001277 	.word	0x08001277
 8001200:	08001251 	.word	0x08001251
 8001204:	08001263 	.word	0x08001263
 8001208:	080012a5 	.word	0x080012a5
 800120c:	080012ab 	.word	0x080012ab
 8001210:	080012ab 	.word	0x080012ab
 8001214:	080012ab 	.word	0x080012ab
 8001218:	080012ab 	.word	0x080012ab
 800121c:	080012ab 	.word	0x080012ab
 8001220:	080012ab 	.word	0x080012ab
 8001224:	080012ab 	.word	0x080012ab
 8001228:	080012ab 	.word	0x080012ab
 800122c:	080012ab 	.word	0x080012ab
 8001230:	080012ab 	.word	0x080012ab
 8001234:	080012ab 	.word	0x080012ab
 8001238:	080012ab 	.word	0x080012ab
 800123c:	080012ab 	.word	0x080012ab
 8001240:	08001259 	.word	0x08001259
 8001244:	0800126d 	.word	0x0800126d
 8001248:	4a82      	ldr	r2, [pc, #520]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800124e:	e02c      	b.n	80012aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	623b      	str	r3, [r7, #32]
          break;
 8001256:	e029      	b.n	80012ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	3304      	adds	r3, #4
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	e024      	b.n	80012ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	3308      	adds	r3, #8
 8001268:	623b      	str	r3, [r7, #32]
          break;
 800126a:	e01f      	b.n	80012ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	330c      	adds	r3, #12
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e01a      	b.n	80012ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800127e:	2304      	movs	r3, #4
 8001280:	623b      	str	r3, [r7, #32]
          break;
 8001282:	e013      	b.n	80012ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800128c:	2308      	movs	r3, #8
 800128e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	611a      	str	r2, [r3, #16]
          break;
 8001296:	e009      	b.n	80012ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001298:	2308      	movs	r3, #8
 800129a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	615a      	str	r2, [r3, #20]
          break;
 80012a2:	e003      	b.n	80012ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
          break;
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x130>
          break;
 80012aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2bff      	cmp	r3, #255	; 0xff
 80012b0:	d801      	bhi.n	80012b6 <HAL_GPIO_Init+0x13a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	e001      	b.n	80012ba <HAL_GPIO_Init+0x13e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3304      	adds	r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2bff      	cmp	r3, #255	; 0xff
 80012c0:	d802      	bhi.n	80012c8 <HAL_GPIO_Init+0x14c>
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	e002      	b.n	80012ce <HAL_GPIO_Init+0x152>
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	3b08      	subs	r3, #8
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	210f      	movs	r1, #15
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	401a      	ands	r2, r3
 80012e0:	6a39      	ldr	r1, [r7, #32]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	431a      	orrs	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8090 	beq.w	800141c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012fc:	4b56      	ldr	r3, [pc, #344]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a55      	ldr	r2, [pc, #340]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001314:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x2e0>)
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a49      	ldr	r2, [pc, #292]	; (8001460 <HAL_GPIO_Init+0x2e4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d00d      	beq.n	800135c <HAL_GPIO_Init+0x1e0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a48      	ldr	r2, [pc, #288]	; (8001464 <HAL_GPIO_Init+0x2e8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_Init+0x1dc>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a47      	ldr	r2, [pc, #284]	; (8001468 <HAL_GPIO_Init+0x2ec>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_GPIO_Init+0x1d8>
 8001350:	2302      	movs	r3, #2
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1e2>
 8001354:	2303      	movs	r3, #3
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1e2>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1e2>
 800135c:	2300      	movs	r3, #0
 800135e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800136e:	493b      	ldr	r1, [pc, #236]	; (800145c <HAL_GPIO_Init+0x2e0>)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_GPIO_Init+0x2f0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4937      	ldr	r1, [pc, #220]	; (800146c <HAL_GPIO_Init+0x2f0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	4933      	ldr	r1, [pc, #204]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	492d      	ldr	r1, [pc, #180]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4929      	ldr	r1, [pc, #164]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	4923      	ldr	r1, [pc, #140]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	491f      	ldr	r1, [pc, #124]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	4919      	ldr	r1, [pc, #100]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4915      	ldr	r1, [pc, #84]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001418:	4013      	ands	r3, r2
 800141a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3301      	adds	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	f47f aeaf 	bne.w	8001190 <HAL_GPIO_Init+0x14>
  }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	372c      	adds	r7, #44	; 0x2c
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	10320000 	.word	0x10320000
 8001444:	10310000 	.word	0x10310000
 8001448:	10220000 	.word	0x10220000
 800144c:	10210000 	.word	0x10210000
 8001450:	10120000 	.word	0x10120000
 8001454:	10110000 	.word	0x10110000
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000
 8001460:	40010800 	.word	0x40010800
 8001464:	40010c00 	.word	0x40010c00
 8001468:	40011000 	.word	0x40011000
 800146c:	40010400 	.word	0x40010400

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	611a      	str	r2, [r3, #16]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4013      	ands	r3, r2
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43d9      	mvns	r1, r3
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	400b      	ands	r3, r1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	611a      	str	r2, [r3, #16]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e26c      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8087 	beq.w	8001602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f4:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d00c      	beq.n	800151a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001500:	4b8f      	ldr	r3, [pc, #572]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d112      	bne.n	8001532 <HAL_RCC_OscConfig+0x5e>
 800150c:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d10b      	bne.n	8001532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151a:	4b89      	ldr	r3, [pc, #548]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d06c      	beq.n	8001600 <HAL_RCC_OscConfig+0x12c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d168      	bne.n	8001600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e246      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x76>
 800153c:	4b80      	ldr	r3, [pc, #512]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a7f      	ldr	r2, [pc, #508]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e02e      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x98>
 8001552:	4b7b      	ldr	r3, [pc, #492]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7a      	ldr	r2, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b78      	ldr	r3, [pc, #480]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a77      	ldr	r2, [pc, #476]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0xbc>
 8001576:	4b72      	ldr	r3, [pc, #456]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a71      	ldr	r2, [pc, #452]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6e      	ldr	r2, [pc, #440]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 8001590:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a6a      	ldr	r2, [pc, #424]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a67      	ldr	r2, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc1c 	bl	8000dec <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fc18 	bl	8000dec <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1fa      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe4>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc08 	bl	8000dec <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fc04 	bl	8000dec <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1e6      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x10c>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800160e:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x18c>
 8001626:	4b46      	ldr	r3, [pc, #280]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1ba      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4939      	ldr	r1, [pc, #228]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fbbd 	bl	8000dec <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fbb9 	bl	8000dec <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e19b      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4927      	ldr	r1, [pc, #156]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb9c 	bl	8000dec <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fb98 	bl	8000dec <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e17a      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03a      	beq.n	8001758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_RCC_OscConfig+0x274>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fb7c 	bl	8000dec <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff fb78 	bl	8000dec <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e15a      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_RCC_OscConfig+0x26c>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f000 fad8 	bl	8001ccc <RCC_Delay>
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_RCC_OscConfig+0x274>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fb62 	bl	8000dec <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172a:	e00f      	b.n	800174c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fb5e 	bl	8000dec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d908      	bls.n	800174c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e140      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	42420000 	.word	0x42420000
 8001748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b9e      	ldr	r3, [pc, #632]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e9      	bne.n	800172c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a6 	beq.w	80018b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b97      	ldr	r3, [pc, #604]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10d      	bne.n	8001792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b94      	ldr	r3, [pc, #592]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a93      	ldr	r2, [pc, #588]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b91      	ldr	r3, [pc, #580]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b8e      	ldr	r3, [pc, #568]	; (80019cc <HAL_RCC_OscConfig+0x4f8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179e:	4b8b      	ldr	r3, [pc, #556]	; (80019cc <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a8a      	ldr	r2, [pc, #552]	; (80019cc <HAL_RCC_OscConfig+0x4f8>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb1f 	bl	8000dec <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff fb1b 	bl	8000dec <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	; 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e0fd      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	4b81      	ldr	r3, [pc, #516]	; (80019cc <HAL_RCC_OscConfig+0x4f8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x312>
 80017d8:	4b7b      	ldr	r3, [pc, #492]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a7a      	ldr	r2, [pc, #488]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e02d      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x334>
 80017ee:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a75      	ldr	r2, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a72      	ldr	r2, [pc, #456]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	e01c      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x356>
 8001810:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a6c      	ldr	r2, [pc, #432]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a69      	ldr	r2, [pc, #420]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 800182a:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a66      	ldr	r2, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4a63      	ldr	r2, [pc, #396]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d015      	beq.n	8001876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff facf 	bl	8000dec <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff facb 	bl	8000dec <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0ab      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ee      	beq.n	8001852 <HAL_RCC_OscConfig+0x37e>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff fab9 	bl	8000dec <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fab5 	bl	8000dec <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e095      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8081 	beq.w	80019be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d061      	beq.n	800198c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d146      	bne.n	800195e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_RCC_OscConfig+0x4fc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fa89 	bl	8000dec <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fa85 	bl	8000dec <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e067      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d108      	bne.n	8001918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	492d      	ldr	r1, [pc, #180]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a19      	ldr	r1, [r3, #32]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	430b      	orrs	r3, r1
 800192a:	4927      	ldr	r1, [pc, #156]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x4fc>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff fa59 	bl	8000dec <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff fa55 	bl	8000dec <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e037      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x46a>
 800195c:	e02f      	b.n	80019be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_RCC_OscConfig+0x4fc>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fa42 	bl	8000dec <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fa3e 	bl	8000dec <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e020      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x498>
 800198a:	e018      	b.n	80019be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e013      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	42420060 	.word	0x42420060

080019d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d0      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 0207 	bic.w	r2, r3, #7
 80019fe:	4965      	ldr	r1, [pc, #404]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d040      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e073      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06b      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4936      	ldr	r1, [pc, #216]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f992 	bl	8000dec <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f98e 	bl	8000dec <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e053      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d210      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	4922      	ldr	r1, [pc, #136]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f8f0 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	080031a4 	.word	0x080031a4
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b490      	push	{r4, r7}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bb0:	1d3c      	adds	r4, r7, #4
 8001bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bb8:	f240 2301 	movw	r3, #513	; 0x201
 8001bbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x40>
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x46>
 8001be6:	e02d      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bea:	623b      	str	r3, [r7, #32]
      break;
 8001bec:	e02d      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	0c9b      	lsrs	r3, r3, #18
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c5b      	lsrs	r3, r3, #17
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c26:	fb02 f203 	mul.w	r2, r2, r3
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	e004      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c38:	fb02 f303 	mul.w	r3, r2, r3
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	623b      	str	r3, [r7, #32]
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c46:	623b      	str	r3, [r7, #32]
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc90      	pop	{r4, r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	08003194 	.word	0x08003194
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	007a1200 	.word	0x007a1200
 8001c64:	003d0900 	.word	0x003d0900

08001c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff2 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	080031b4 	.word	0x080031b4

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	0adb      	lsrs	r3, r3, #11
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	080031b4 	.word	0x080031b4

08001ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <RCC_Delay+0x34>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <RCC_Delay+0x38>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0a5b      	lsrs	r3, r3, #9
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ce8:	bf00      	nop
  }
  while (Delay --);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	60fa      	str	r2, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f9      	bne.n	8001ce8 <RCC_Delay+0x1c>
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000004 	.word	0x20000004
 8001d04:	10624dd3 	.word	0x10624dd3

08001d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e041      	b.n	8001d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe feee 	bl	8000b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f000 fa6a 	bl	8002220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d001      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e035      	b.n	8001e2c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_TIM_Base_Start_IT+0x90>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d009      	beq.n	8001df6 <HAL_TIM_Base_Start_IT+0x4e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dea:	d004      	beq.n	8001df6 <HAL_TIM_Base_Start_IT+0x4e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_TIM_Base_Start_IT+0x94>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d111      	bne.n	8001e1a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d010      	beq.n	8001e2a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e18:	e007      	b.n	8001e2a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	40000400 	.word	0x40000400

08001e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0202 	mvn.w	r2, #2
 8001e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f9b1 	bl	80021ea <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f9a4 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f9b3 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0204 	mvn.w	r2, #4
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f987 	bl	80021ea <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f97a 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f989 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0208 	mvn.w	r2, #8
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f95d 	bl	80021ea <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f950 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f95f 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0210 	mvn.w	r2, #16
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f933 	bl	80021ea <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f926 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f935 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0201 	mvn.w	r2, #1
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fd56 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b80      	cmp	r3, #128	; 0x80
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d107      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fa67 	bl	80024be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b40      	cmp	r3, #64	; 0x40
 8001ffc:	d10e      	bne.n	800201c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002008:	2b40      	cmp	r3, #64	; 0x40
 800200a:	d107      	bne.n	800201c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8f9 	bl	800220e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b20      	cmp	r3, #32
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b20      	cmp	r3, #32
 8002036:	d107      	bne.n	8002048 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0220 	mvn.w	r2, #32
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fa32 	bl	80024ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_TIM_ConfigClockSource+0x18>
 8002064:	2302      	movs	r3, #2
 8002066:	e0b3      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x180>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002086:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800208e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a0:	d03e      	beq.n	8002120 <HAL_TIM_ConfigClockSource+0xd0>
 80020a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a6:	f200 8087 	bhi.w	80021b8 <HAL_TIM_ConfigClockSource+0x168>
 80020aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ae:	f000 8085 	beq.w	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b6:	d87f      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x168>
 80020b8:	2b70      	cmp	r3, #112	; 0x70
 80020ba:	d01a      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0xa2>
 80020bc:	2b70      	cmp	r3, #112	; 0x70
 80020be:	d87b      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x168>
 80020c0:	2b60      	cmp	r3, #96	; 0x60
 80020c2:	d050      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x116>
 80020c4:	2b60      	cmp	r3, #96	; 0x60
 80020c6:	d877      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x168>
 80020c8:	2b50      	cmp	r3, #80	; 0x50
 80020ca:	d03c      	beq.n	8002146 <HAL_TIM_ConfigClockSource+0xf6>
 80020cc:	2b50      	cmp	r3, #80	; 0x50
 80020ce:	d873      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x168>
 80020d0:	2b40      	cmp	r3, #64	; 0x40
 80020d2:	d058      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x136>
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d86f      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x168>
 80020d8:	2b30      	cmp	r3, #48	; 0x30
 80020da:	d064      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x156>
 80020dc:	2b30      	cmp	r3, #48	; 0x30
 80020de:	d86b      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x168>
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d060      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x156>
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d867      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x168>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d05c      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x156>
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d05a      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80020f0:	e062      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6899      	ldr	r1, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f000 f95c 	bl	80023be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002114:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	609a      	str	r2, [r3, #8]
      break;
 800211e:	e04e      	b.n	80021be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6899      	ldr	r1, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f000 f945 	bl	80023be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002142:	609a      	str	r2, [r3, #8]
      break;
 8002144:	e03b      	b.n	80021be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	461a      	mov	r2, r3
 8002154:	f000 f8bc 	bl	80022d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2150      	movs	r1, #80	; 0x50
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f913 	bl	800238a <TIM_ITRx_SetConfig>
      break;
 8002164:	e02b      	b.n	80021be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6859      	ldr	r1, [r3, #4]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	461a      	mov	r2, r3
 8002174:	f000 f8da 	bl	800232c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2160      	movs	r1, #96	; 0x60
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f903 	bl	800238a <TIM_ITRx_SetConfig>
      break;
 8002184:	e01b      	b.n	80021be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	461a      	mov	r2, r3
 8002194:	f000 f89c 	bl	80022d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2140      	movs	r1, #64	; 0x40
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f8f3 	bl	800238a <TIM_ITRx_SetConfig>
      break;
 80021a4:	e00b      	b.n	80021be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4610      	mov	r0, r2
 80021b2:	f000 f8ea 	bl	800238a <TIM_ITRx_SetConfig>
        break;
 80021b6:	e002      	b.n	80021be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021b8:	bf00      	nop
 80021ba:	e000      	b.n	80021be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <TIM_Base_SetConfig+0xa8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x28>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x28>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <TIM_Base_SetConfig+0xac>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <TIM_Base_SetConfig+0xa8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <TIM_Base_SetConfig+0x52>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d003      	beq.n	8002272 <TIM_Base_SetConfig+0x52>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <TIM_Base_SetConfig+0xac>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d108      	bne.n	8002284 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <TIM_Base_SetConfig+0xa8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40000400 	.word	0x40000400

080022d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f023 0201 	bic.w	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f023 030a 	bic.w	r3, r3, #10
 800230c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 0210 	bic.w	r2, r3, #16
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002356:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	031b      	lsls	r3, r3, #12
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	621a      	str	r2, [r3, #32]
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f043 0307 	orr.w	r3, r3, #7
 80023ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023be:	b480      	push	{r7}
 80023c0:	b087      	sub	sp, #28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	021a      	lsls	r2, r3, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	609a      	str	r2, [r3, #8]
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002410:	2302      	movs	r3, #2
 8002412:	e041      	b.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d004      	beq.n	800246c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d10c      	bne.n	8002486 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4313      	orrs	r3, r2
 800247c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400

080024ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e03f      	b.n	8002562 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fb2e 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fc25 	bl	8002d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b08a      	sub	sp, #40	; 0x28
 800256e:	af02      	add	r7, sp, #8
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	d17c      	bne.n	8002684 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_UART_Transmit+0x2c>
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e075      	b.n	8002686 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_UART_Transmit+0x3e>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e06e      	b.n	8002686 <HAL_UART_Transmit+0x11c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025be:	f7fe fc15 	bl	8000dec <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	d108      	bne.n	80025ec <HAL_UART_Transmit+0x82>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e003      	b.n	80025f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025fc:	e02a      	b.n	8002654 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fa11 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e036      	b.n	8002686 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3302      	adds	r3, #2
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	e007      	b.n	8002646 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1cf      	bne.n	80025fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2200      	movs	r2, #0
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f9e1 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e006      	b.n	8002686 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_UART_IRQHandler+0x52>
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa99 	bl	8002c12 <UART_Receive_IT>
      return;
 80026e0:	e17b      	b.n	80029da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80b1 	beq.w	800284c <HAL_UART_IRQHandler+0x1bc>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_UART_IRQHandler+0x70>
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80a6 	beq.w	800284c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_UART_IRQHandler+0x90>
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_UART_IRQHandler+0xb0>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f043 0202 	orr.w	r2, r3, #2
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_UART_IRQHandler+0xd0>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00f      	beq.n	800278a <HAL_UART_IRQHandler+0xfa>
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <HAL_UART_IRQHandler+0xee>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f043 0208 	orr.w	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 811e 	beq.w	80029d0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_UART_IRQHandler+0x11e>
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fa32 	bl	8002c12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <HAL_UART_IRQHandler+0x146>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d031      	beq.n	800283a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f974 	bl	8002ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d023      	beq.n	8002832 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d013      	beq.n	800282a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	4a76      	ldr	r2, [pc, #472]	; (80029e0 <HAL_UART_IRQHandler+0x350>)
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fc3e 	bl	8001090 <HAL_DMA_Abort_IT>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002824:	4610      	mov	r0, r2
 8002826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002828:	e00e      	b.n	8002848 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8ec 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002830:	e00a      	b.n	8002848 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8e8 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	e006      	b.n	8002848 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8e4 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002846:	e0c3      	b.n	80029d0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002848:	bf00      	nop
    return;
 800284a:	e0c1      	b.n	80029d0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	2b01      	cmp	r3, #1
 8002852:	f040 80a1 	bne.w	8002998 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 809b 	beq.w	8002998 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8095 	beq.w	8002998 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d04e      	beq.n	8002930 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800289c:	8a3b      	ldrh	r3, [r7, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8098 	beq.w	80029d4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028a8:	8a3a      	ldrh	r2, [r7, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	f080 8092 	bcs.w	80029d4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8a3a      	ldrh	r2, [r7, #16]
 80028b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d02b      	beq.n	8002918 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0210 	bic.w	r2, r2, #16
 800290c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fb81 	bl	800101a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002920:	b29b      	uxth	r3, r3
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b29b      	uxth	r3, r3
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f876 	bl	8002a1a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800292e:	e051      	b.n	80029d4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002938:	b29b      	uxth	r3, r3
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d047      	beq.n	80029d8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002948:	8a7b      	ldrh	r3, [r7, #18]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d044      	beq.n	80029d8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800295c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0210 	bic.w	r2, r2, #16
 800298a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298c:	8a7b      	ldrh	r3, [r7, #18]
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f842 	bl	8002a1a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002996:	e01f      	b.n	80029d8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <HAL_UART_IRQHandler+0x324>
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8c9 	bl	8002b44 <UART_Transmit_IT>
    return;
 80029b2:	e012      	b.n	80029da <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_UART_IRQHandler+0x34a>
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f90a 	bl	8002be2 <UART_EndTransmit_IT>
    return;
 80029ce:	e004      	b.n	80029da <HAL_UART_IRQHandler+0x34a>
    return;
 80029d0:	bf00      	nop
 80029d2:	e002      	b.n	80029da <HAL_UART_IRQHandler+0x34a>
      return;
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <HAL_UART_IRQHandler+0x34a>
      return;
 80029d8:	bf00      	nop
  }
}
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	08002b1d 	.word	0x08002b1d

080029e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a40:	e02c      	b.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d028      	beq.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a50:	f7fe f9cc 	bl	8000dec <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d21d      	bcs.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e00f      	b.n	8002abc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d0c3      	beq.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ada:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0210 	bic.w	r2, r2, #16
 8002b02:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff ff66 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b21      	cmp	r3, #33	; 0x21
 8002b56:	d13e      	bne.n	8002bd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d114      	bne.n	8002b8c <UART_Transmit_IT+0x48>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d110      	bne.n	8002b8c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	1c9a      	adds	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	621a      	str	r2, [r3, #32]
 8002b8a:	e008      	b.n	8002b9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	1c59      	adds	r1, r3, #1
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6211      	str	r1, [r2, #32]
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4619      	mov	r1, r3
 8002bac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff feee 	bl	80029e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b22      	cmp	r3, #34	; 0x22
 8002c24:	f040 8099 	bne.w	8002d5a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c30:	d117      	bne.n	8002c62 <UART_Receive_IT+0x50>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d113      	bne.n	8002c62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	1c9a      	adds	r2, r3, #2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c60:	e026      	b.n	8002cb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c74:	d007      	beq.n	8002c86 <UART_Receive_IT+0x74>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <UART_Receive_IT+0x82>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e008      	b.n	8002ca6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d148      	bne.n	8002d56 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0220 	bic.w	r2, r2, #32
 8002cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d123      	bne.n	8002d4c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0210 	bic.w	r2, r2, #16
 8002d18:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d10a      	bne.n	8002d3e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fe68 	bl	8002a1a <HAL_UARTEx_RxEventCallback>
 8002d4a:	e002      	b.n	8002d52 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff fe52 	bl	80029f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e002      	b.n	8002d5c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
  }
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d9e:	f023 030c 	bic.w	r3, r3, #12
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <UART_SetConfig+0x114>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dcc:	f7fe ff6a 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	e002      	b.n	8002dda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f7fe ff52 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002dd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009a      	lsls	r2, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <UART_SetConfig+0x118>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	0119      	lsls	r1, r3, #4
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <UART_SetConfig+0x118>)
 8002e12:	fba3 0302 	umull	r0, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2064      	movs	r0, #100	; 0x64
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	3332      	adds	r3, #50	; 0x32
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <UART_SetConfig+0x118>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e30:	4419      	add	r1, r3
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009a      	lsls	r2, r3, #2
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <UART_SetConfig+0x118>)
 8002e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2064      	movs	r0, #100	; 0x64
 8002e52:	fb00 f303 	mul.w	r3, r0, r3
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	3332      	adds	r3, #50	; 0x32
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <UART_SetConfig+0x118>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	f003 020f 	and.w	r2, r3, #15
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	440a      	add	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	51eb851f 	.word	0x51eb851f

08002e80 <__errno>:
 8002e80:	4b01      	ldr	r3, [pc, #4]	; (8002e88 <__errno+0x8>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000010 	.word	0x20000010

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	2600      	movs	r6, #0
 8002e90:	4d0c      	ldr	r5, [pc, #48]	; (8002ec4 <__libc_init_array+0x38>)
 8002e92:	4c0d      	ldr	r4, [pc, #52]	; (8002ec8 <__libc_init_array+0x3c>)
 8002e94:	1b64      	subs	r4, r4, r5
 8002e96:	10a4      	asrs	r4, r4, #2
 8002e98:	42a6      	cmp	r6, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	f000 f952 	bl	8003144 <_init>
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	4d0a      	ldr	r5, [pc, #40]	; (8002ecc <__libc_init_array+0x40>)
 8002ea4:	4c0a      	ldr	r4, [pc, #40]	; (8002ed0 <__libc_init_array+0x44>)
 8002ea6:	1b64      	subs	r4, r4, r5
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	42a6      	cmp	r6, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb4:	4798      	blx	r3
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebe:	4798      	blx	r3
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	080031e4 	.word	0x080031e4
 8002ec8:	080031e4 	.word	0x080031e4
 8002ecc:	080031e4 	.word	0x080031e4
 8002ed0:	080031e8 	.word	0x080031e8

08002ed4 <__itoa>:
 8002ed4:	1e93      	subs	r3, r2, #2
 8002ed6:	2b22      	cmp	r3, #34	; 0x22
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	460c      	mov	r4, r1
 8002edc:	d904      	bls.n	8002ee8 <__itoa+0x14>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	461c      	mov	r4, r3
 8002ee2:	700b      	strb	r3, [r1, #0]
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	bd10      	pop	{r4, pc}
 8002ee8:	2a0a      	cmp	r2, #10
 8002eea:	d109      	bne.n	8002f00 <__itoa+0x2c>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	da07      	bge.n	8002f00 <__itoa+0x2c>
 8002ef0:	232d      	movs	r3, #45	; 0x2d
 8002ef2:	700b      	strb	r3, [r1, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4240      	negs	r0, r0
 8002ef8:	4421      	add	r1, r4
 8002efa:	f000 f8d3 	bl	80030a4 <__utoa>
 8002efe:	e7f1      	b.n	8002ee4 <__itoa+0x10>
 8002f00:	2100      	movs	r1, #0
 8002f02:	e7f9      	b.n	8002ef8 <__itoa+0x24>

08002f04 <itoa>:
 8002f04:	f7ff bfe6 	b.w	8002ed4 <__itoa>

08002f08 <malloc>:
 8002f08:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <malloc+0xc>)
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	f000 b85f 	b.w	8002fd0 <_malloc_r>
 8002f12:	bf00      	nop
 8002f14:	20000010 	.word	0x20000010

08002f18 <free>:
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <free+0xc>)
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	f000 b80b 	b.w	8002f38 <_free_r>
 8002f22:	bf00      	nop
 8002f24:	20000010 	.word	0x20000010

08002f28 <memset>:
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4402      	add	r2, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	f803 1b01 	strb.w	r1, [r3], #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <_free_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	d043      	beq.n	8002fc8 <_free_r+0x90>
 8002f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f44:	1f0c      	subs	r4, r1, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bfb8      	it	lt
 8002f4a:	18e4      	addlt	r4, r4, r3
 8002f4c:	f000 f8ec 	bl	8003128 <__malloc_lock>
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <_free_r+0x94>)
 8002f52:	6813      	ldr	r3, [r2, #0]
 8002f54:	4610      	mov	r0, r2
 8002f56:	b933      	cbnz	r3, 8002f66 <_free_r+0x2e>
 8002f58:	6063      	str	r3, [r4, #4]
 8002f5a:	6014      	str	r4, [r2, #0]
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f62:	f000 b8e7 	b.w	8003134 <__malloc_unlock>
 8002f66:	42a3      	cmp	r3, r4
 8002f68:	d90a      	bls.n	8002f80 <_free_r+0x48>
 8002f6a:	6821      	ldr	r1, [r4, #0]
 8002f6c:	1862      	adds	r2, r4, r1
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	bf01      	itttt	eq
 8002f72:	681a      	ldreq	r2, [r3, #0]
 8002f74:	685b      	ldreq	r3, [r3, #4]
 8002f76:	1852      	addeq	r2, r2, r1
 8002f78:	6022      	streq	r2, [r4, #0]
 8002f7a:	6063      	str	r3, [r4, #4]
 8002f7c:	6004      	str	r4, [r0, #0]
 8002f7e:	e7ed      	b.n	8002f5c <_free_r+0x24>
 8002f80:	461a      	mov	r2, r3
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	b10b      	cbz	r3, 8002f8a <_free_r+0x52>
 8002f86:	42a3      	cmp	r3, r4
 8002f88:	d9fa      	bls.n	8002f80 <_free_r+0x48>
 8002f8a:	6811      	ldr	r1, [r2, #0]
 8002f8c:	1850      	adds	r0, r2, r1
 8002f8e:	42a0      	cmp	r0, r4
 8002f90:	d10b      	bne.n	8002faa <_free_r+0x72>
 8002f92:	6820      	ldr	r0, [r4, #0]
 8002f94:	4401      	add	r1, r0
 8002f96:	1850      	adds	r0, r2, r1
 8002f98:	4283      	cmp	r3, r0
 8002f9a:	6011      	str	r1, [r2, #0]
 8002f9c:	d1de      	bne.n	8002f5c <_free_r+0x24>
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4401      	add	r1, r0
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	6053      	str	r3, [r2, #4]
 8002fa8:	e7d8      	b.n	8002f5c <_free_r+0x24>
 8002faa:	d902      	bls.n	8002fb2 <_free_r+0x7a>
 8002fac:	230c      	movs	r3, #12
 8002fae:	602b      	str	r3, [r5, #0]
 8002fb0:	e7d4      	b.n	8002f5c <_free_r+0x24>
 8002fb2:	6820      	ldr	r0, [r4, #0]
 8002fb4:	1821      	adds	r1, r4, r0
 8002fb6:	428b      	cmp	r3, r1
 8002fb8:	bf01      	itttt	eq
 8002fba:	6819      	ldreq	r1, [r3, #0]
 8002fbc:	685b      	ldreq	r3, [r3, #4]
 8002fbe:	1809      	addeq	r1, r1, r0
 8002fc0:	6021      	streq	r1, [r4, #0]
 8002fc2:	6063      	str	r3, [r4, #4]
 8002fc4:	6054      	str	r4, [r2, #4]
 8002fc6:	e7c9      	b.n	8002f5c <_free_r+0x24>
 8002fc8:	bd38      	pop	{r3, r4, r5, pc}
 8002fca:	bf00      	nop
 8002fcc:	200000b0 	.word	0x200000b0

08002fd0 <_malloc_r>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	1ccd      	adds	r5, r1, #3
 8002fd4:	f025 0503 	bic.w	r5, r5, #3
 8002fd8:	3508      	adds	r5, #8
 8002fda:	2d0c      	cmp	r5, #12
 8002fdc:	bf38      	it	cc
 8002fde:	250c      	movcc	r5, #12
 8002fe0:	2d00      	cmp	r5, #0
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	db01      	blt.n	8002fea <_malloc_r+0x1a>
 8002fe6:	42a9      	cmp	r1, r5
 8002fe8:	d903      	bls.n	8002ff2 <_malloc_r+0x22>
 8002fea:	230c      	movs	r3, #12
 8002fec:	6033      	str	r3, [r6, #0]
 8002fee:	2000      	movs	r0, #0
 8002ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff2:	f000 f899 	bl	8003128 <__malloc_lock>
 8002ff6:	4921      	ldr	r1, [pc, #132]	; (800307c <_malloc_r+0xac>)
 8002ff8:	680a      	ldr	r2, [r1, #0]
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	b99c      	cbnz	r4, 8003026 <_malloc_r+0x56>
 8002ffe:	4f20      	ldr	r7, [pc, #128]	; (8003080 <_malloc_r+0xb0>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b923      	cbnz	r3, 800300e <_malloc_r+0x3e>
 8003004:	4621      	mov	r1, r4
 8003006:	4630      	mov	r0, r6
 8003008:	f000 f83c 	bl	8003084 <_sbrk_r>
 800300c:	6038      	str	r0, [r7, #0]
 800300e:	4629      	mov	r1, r5
 8003010:	4630      	mov	r0, r6
 8003012:	f000 f837 	bl	8003084 <_sbrk_r>
 8003016:	1c43      	adds	r3, r0, #1
 8003018:	d123      	bne.n	8003062 <_malloc_r+0x92>
 800301a:	230c      	movs	r3, #12
 800301c:	4630      	mov	r0, r6
 800301e:	6033      	str	r3, [r6, #0]
 8003020:	f000 f888 	bl	8003134 <__malloc_unlock>
 8003024:	e7e3      	b.n	8002fee <_malloc_r+0x1e>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	1b5b      	subs	r3, r3, r5
 800302a:	d417      	bmi.n	800305c <_malloc_r+0x8c>
 800302c:	2b0b      	cmp	r3, #11
 800302e:	d903      	bls.n	8003038 <_malloc_r+0x68>
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	441c      	add	r4, r3
 8003034:	6025      	str	r5, [r4, #0]
 8003036:	e004      	b.n	8003042 <_malloc_r+0x72>
 8003038:	6863      	ldr	r3, [r4, #4]
 800303a:	42a2      	cmp	r2, r4
 800303c:	bf0c      	ite	eq
 800303e:	600b      	streq	r3, [r1, #0]
 8003040:	6053      	strne	r3, [r2, #4]
 8003042:	4630      	mov	r0, r6
 8003044:	f000 f876 	bl	8003134 <__malloc_unlock>
 8003048:	f104 000b 	add.w	r0, r4, #11
 800304c:	1d23      	adds	r3, r4, #4
 800304e:	f020 0007 	bic.w	r0, r0, #7
 8003052:	1ac2      	subs	r2, r0, r3
 8003054:	d0cc      	beq.n	8002ff0 <_malloc_r+0x20>
 8003056:	1a1b      	subs	r3, r3, r0
 8003058:	50a3      	str	r3, [r4, r2]
 800305a:	e7c9      	b.n	8002ff0 <_malloc_r+0x20>
 800305c:	4622      	mov	r2, r4
 800305e:	6864      	ldr	r4, [r4, #4]
 8003060:	e7cc      	b.n	8002ffc <_malloc_r+0x2c>
 8003062:	1cc4      	adds	r4, r0, #3
 8003064:	f024 0403 	bic.w	r4, r4, #3
 8003068:	42a0      	cmp	r0, r4
 800306a:	d0e3      	beq.n	8003034 <_malloc_r+0x64>
 800306c:	1a21      	subs	r1, r4, r0
 800306e:	4630      	mov	r0, r6
 8003070:	f000 f808 	bl	8003084 <_sbrk_r>
 8003074:	3001      	adds	r0, #1
 8003076:	d1dd      	bne.n	8003034 <_malloc_r+0x64>
 8003078:	e7cf      	b.n	800301a <_malloc_r+0x4a>
 800307a:	bf00      	nop
 800307c:	200000b0 	.word	0x200000b0
 8003080:	200000b4 	.word	0x200000b4

08003084 <_sbrk_r>:
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	2300      	movs	r3, #0
 8003088:	4d05      	ldr	r5, [pc, #20]	; (80030a0 <_sbrk_r+0x1c>)
 800308a:	4604      	mov	r4, r0
 800308c:	4608      	mov	r0, r1
 800308e:	602b      	str	r3, [r5, #0]
 8003090:	f7fd fdf2 	bl	8000c78 <_sbrk>
 8003094:	1c43      	adds	r3, r0, #1
 8003096:	d102      	bne.n	800309e <_sbrk_r+0x1a>
 8003098:	682b      	ldr	r3, [r5, #0]
 800309a:	b103      	cbz	r3, 800309e <_sbrk_r+0x1a>
 800309c:	6023      	str	r3, [r4, #0]
 800309e:	bd38      	pop	{r3, r4, r5, pc}
 80030a0:	20000470 	.word	0x20000470

080030a4 <__utoa>:
 80030a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a6:	b08b      	sub	sp, #44	; 0x2c
 80030a8:	4605      	mov	r5, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	466e      	mov	r6, sp
 80030ae:	4c1d      	ldr	r4, [pc, #116]	; (8003124 <__utoa+0x80>)
 80030b0:	f104 0c20 	add.w	ip, r4, #32
 80030b4:	4637      	mov	r7, r6
 80030b6:	6820      	ldr	r0, [r4, #0]
 80030b8:	6861      	ldr	r1, [r4, #4]
 80030ba:	3408      	adds	r4, #8
 80030bc:	c703      	stmia	r7!, {r0, r1}
 80030be:	4564      	cmp	r4, ip
 80030c0:	463e      	mov	r6, r7
 80030c2:	d1f7      	bne.n	80030b4 <__utoa+0x10>
 80030c4:	7921      	ldrb	r1, [r4, #4]
 80030c6:	6820      	ldr	r0, [r4, #0]
 80030c8:	7139      	strb	r1, [r7, #4]
 80030ca:	1e91      	subs	r1, r2, #2
 80030cc:	2922      	cmp	r1, #34	; 0x22
 80030ce:	6038      	str	r0, [r7, #0]
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	d904      	bls.n	80030e0 <__utoa+0x3c>
 80030d6:	7019      	strb	r1, [r3, #0]
 80030d8:	460b      	mov	r3, r1
 80030da:	4618      	mov	r0, r3
 80030dc:	b00b      	add	sp, #44	; 0x2c
 80030de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e0:	1e58      	subs	r0, r3, #1
 80030e2:	4684      	mov	ip, r0
 80030e4:	fbb5 f7f2 	udiv	r7, r5, r2
 80030e8:	fb02 5617 	mls	r6, r2, r7, r5
 80030ec:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80030f0:	4476      	add	r6, lr
 80030f2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80030f6:	460c      	mov	r4, r1
 80030f8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80030fc:	462e      	mov	r6, r5
 80030fe:	42b2      	cmp	r2, r6
 8003100:	463d      	mov	r5, r7
 8003102:	f101 0101 	add.w	r1, r1, #1
 8003106:	d9ed      	bls.n	80030e4 <__utoa+0x40>
 8003108:	2200      	movs	r2, #0
 800310a:	545a      	strb	r2, [r3, r1]
 800310c:	1919      	adds	r1, r3, r4
 800310e:	1aa5      	subs	r5, r4, r2
 8003110:	42aa      	cmp	r2, r5
 8003112:	dae2      	bge.n	80030da <__utoa+0x36>
 8003114:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003118:	780e      	ldrb	r6, [r1, #0]
 800311a:	3201      	adds	r2, #1
 800311c:	7006      	strb	r6, [r0, #0]
 800311e:	f801 5901 	strb.w	r5, [r1], #-1
 8003122:	e7f4      	b.n	800310e <__utoa+0x6a>
 8003124:	080031bc 	.word	0x080031bc

08003128 <__malloc_lock>:
 8003128:	4801      	ldr	r0, [pc, #4]	; (8003130 <__malloc_lock+0x8>)
 800312a:	f000 b809 	b.w	8003140 <__retarget_lock_acquire_recursive>
 800312e:	bf00      	nop
 8003130:	20000478 	.word	0x20000478

08003134 <__malloc_unlock>:
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <__malloc_unlock+0x8>)
 8003136:	f000 b804 	b.w	8003142 <__retarget_lock_release_recursive>
 800313a:	bf00      	nop
 800313c:	20000478 	.word	0x20000478

08003140 <__retarget_lock_acquire_recursive>:
 8003140:	4770      	bx	lr

08003142 <__retarget_lock_release_recursive>:
 8003142:	4770      	bx	lr

08003144 <_init>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr

08003150 <_fini>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	bf00      	nop
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr
